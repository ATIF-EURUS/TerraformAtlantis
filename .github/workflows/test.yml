name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color

    - name: Plan File
      run: echo  " ${{ steps.plan.outputs.stdout }} " >> TerraformPlanFiles/terraformplan

    - name: Echo Plan File
      run: cat TerraformPlanFiles/terraformplan

    - name: Conditoining 
      id: testing
      run: |
        FILESIZE=$(stat -c%s "TerraformPlanFiles/terraformplan")
        MAXSIZE=1000000
        declare -a SummaryFiles=[
        echo "Size of $FILENAME = $FILESIZE bytes."
        if (( FILESIZE < MAXSIZE)); then 
            echo "<pre><code>${{ steps.plan.outputs.stdout }}</code></pre>" >> $GITHUB_STEP_SUMMARY
        else
          cd TerraformPlanFiles
          split -b $MAXSIZE terraformplan tfplan
          ls
          for entry in *
          do  
            SummaryFiles+="'${entry}',"
          done
          echo ${SummaryFiles[@]}
          echo ::set-output name=version_matrix::${SummaryFiles[@]}']'
        fi
    outputs:
      version_matrix: ${{ steps.testing.outputs.version_matrix }}


  ci:
    needs: terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.terraform.outputs.version_matrix) }}
    steps:
      - uses: actions/checkout@v2
      - run: echo "<pre><code>${{ matrix.version }}</code></pre>" >> $GITHUB_STEP_SUMMARY